
from HP_Network_funcs import *
from RedditHP import *

def get_graphs():
    book_path, reddit_path = "plot_data/book_network.pkl", "plot_data/reddit_network.pkl"

    if os.path.exists(book_path) and os.path.exists(reddit_path):
        with open(book_path, "rb") as file:
            G_books = pickle.load(file)
        with open(reddit_path, "rb") as file:
            G_reddit = pickle.load(file)
    else:
        # books
        with open('data/characters_by_house.pkl', 'rb') as file:
            characters_by_communities = pkl.load(file)

        names, characters_by_communities_reverse = get_names(characters_by_communities)
        regexPattern = "|".join(names.keys())
        books_in_chapters_names = [[re.sub(regexPattern, lambda name: names[name.group()], chapter ) for chapter in book] for book in books_in_chapters()]
        interactions_, _ = get_interactions(names, books_in_chapters_names)
        G_books = create_network(interactions_, names, characters_by_communities_reverse) 

        # reddit
        user_interaction, houses = UserInteractions()
        G_reddit, partition_reddit = CreateUserInteractionNetwork(user_interaction, houses)

        # save
        with open(book_path, "wb") as file:
                        pickle.dump(G_books, file)
        with open(reddit_path, "wb") as file:
                        pickle.dump(G_reddit, file)

    return G_books, G_reddit

def plot_degree_distributions():
    book_path = "plot_data/graph_book_data.pkl"
    reddit_path = "plot_data/graph_reddit_data.pkl"

    if os.path.exists(book_path) and os.path.exists(reddit_path):
        with open(book_path, "rb") as file:
            graph_book = pickle.load(file)
        with open(reddit_path, "rb") as file:
            graph_reddit = pickle.load(file)

        # A bit of plot setup
        plt.rcParams["font.family"] = "serif"
        plt.rcParams['font.size'] = 11

        fig, ax = plt.subplots(dpi = 100)

        # book data
        names_, degree = zip(*graph_book.degree())

        nbins = 30
        bins = np.logspace(1, np.log(max(degree)), nbins)
        hist, edges = np.histogram(degree, bins = bins, density = True )
        x = (edges[1:] + edges[:-1])/2.
        # remove 0 entries
        xx_books, yy_books = zip(*[(i,j) for (i,j) in zip(x, hist) if j > 0])

        # reddit data
        names_, degree = zip(*graph_reddit.degree())

        nbins = 30
        bins = np.logspace(1, np.log(max(degree)), nbins)
        hist, edges = np.histogram(degree, bins = bins, density = True )
        x = (edges[1:] + edges[:-1])/2.
        # remove 0 entries
        xx_reddit, yy_reddit = zip(*[(i,j) for (i,j) in zip(x, hist) if j > 0])

        ax.plot(xx_books,yy_books, marker = '.', color = "blue", label = "Harry Potter books")
        ax.plot(xx_reddit,yy_reddit, marker = '.', color = "orange", label = "r/harrypotter")
        ax.grid(linestyle = '--')
        ax.set_xscale('log')
        ax.set_yscale('log')
        ax.set_title('Degree distribution of networks')
        ax.set_xlabel('Degree')
        ax.set_ylabel('Probability Density')
        ax.legend()
    else:
        print(f"Please make sure you have the files \'{book_path}\' and \'{reddit_path}\, these files can be generated by running the notebooks HP_Network.ipynb and reddit_HP.ipynb or downloaded from https://wdmdev.github.io/comsocsci2021-project/")

def plot_louvain_partitions():
    book_path = "plot_data/louvain_book_data.pkl"
    reddit_path = "plot_data/louvain_reddit_data.pkl"

    if os.path.exists(book_path) and os.path.exists(reddit_path):
        with open(book_path, "rb") as file:
            M_books, houses_books = pickle.load(file)
        with open(reddit_path, "rb") as file:
            M_reddit, houses_reddit = pickle.load(file)

        fig, ax = plt.subplots(1, 2, dpi = 100, figsize = (15,5))
        fig.suptitle("Hogwarts House Split vs. Louvain Community Split")

        ax = plt.subplot(1,2,1)
        plt.imshow(M_books)
        cbar = plt.colorbar(extend = 'both')
        cbar.set_label("Percentage of Hogwwarts House")
        ax.set_yticks(range(4))
        ax.set_yticklabels(list(houses_books.keys()))
        ax.set_xlabel("Louvain splits")
        ax.set_title("Harry Potter books")
        

        ax = plt.subplot(1,2,2)
        M = np.delete(M_reddit, np.sum(M_reddit, axis = 0) < 0.1, 1)
        plt.imshow(M)
        cbar = plt.colorbar(extend = 'both')
        cbar.set_label("Percentage of Hogwwarts House")
        ax.set_yticks(range(4))
        ax.set_yticklabels(list(set(houses_reddit.values())))
        ax.set_xlabel("Louvain splits")
        ax.set_xticks(range(np.shape(M)[1]))
        ax.set_xticklabels(range(np.shape(M)[1]))
        ax.set_title("r/harrypotter")

        plt.show()

    else:
        print(f"Please make sure you have the files \'{book_path}\' and \'{reddit_path}\, these files can be generated by running the notebooks HP_Network.ipynb and reddit_HP.ipynb or downloaded from https://wdmdev.github.io/comsocsci2021-project/")

def plot_modularity_distributions():
    book_path = "plot_data/modularity_book_data.pkl"
    reddit_path = "plot_data/modularity_reddit_data.pkl"

    if os.path.exists(book_path) and os.path.exists(reddit_path):
        with open(book_path, "rb") as file:
            modularity_books, mod1, mod2 = pickle.load(file)
        with open(reddit_path, "rb") as file:
            modularity_reddit, G, partition = pickle.load(file)

        fig, ax = plt.subplots(figsize = (7,7), dpi = 100)

        ax.hist(modularity_books, bins = 50, density = True, zorder = 3, alpha = .5, label = 'Modularity Density Distribution of config. model in the books', color = "red")
        ax.axvline(mod2, color = 'red', label = 'True modularity of House splitting in the books (no weights)')
        ax.axvline(mod1, color = 'red', label = 'True modularity of House splitting in the books (with weights)', linestyle='--')

        ax.hist(modularity_reddit, bins = 30, alpha = .5, zorder = 3, density = True, label = 'Modularity Density Distribution of config. model on Reddit')
        ax.axvline(nx.algorithms.community.quality.modularity(G,partition, weight = 'weight'), label = 'True Modularity of House splitting on Reddit', color = 'blue')

        ax.grid(linestyle = '--', zorder = 0)
        ax.set_xlabel('Modularity')
        ax.set_ylabel('Probability Density')
        ax.set_title('Modularity comparisons')
        ax.legend(bbox_to_anchor =(1, .5))
    else:
        print(f"Please make sure you have the files \'{book_path}\' and \'{reddit_path}\, these files can be generated by running the notebooks HP_Network.ipynb and reddit_HP.ipynb or downloaded from https://wdmdev.github.io/comsocsci2021-project/")
